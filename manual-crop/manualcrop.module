<?php
/**
 * @file
 * Exposes functionality for manually cropping an image.
 */

require_once 'manualcrop.helpers.inc';
require_once 'manualcrop.admin.inc';

/**
 * Implements hook_help().
 */
function manualcrop_help($path) {
  switch ($path) {
    case 'admin/config/media/image-styles/edit/%':
      return '<p>' . t("<strong>Note:</strong> if you are using a Manual Crop effect, it's forced to be the only Manual Crop effect and first effect in the list.") . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function manualcrop_theme() {
  return array(
    'manualcrop_crop_and_scale_summary' => array(
      'variables' => array('data' => NULL),
    ),
    'manualcrop_crop_summary' => array(
      'variables' => array('data' => NULL),
    ),
    'manualcrop_reuse_summary' => array(
      'variables' => array('data' => NULL),
    ),
    'manualcrop_croptool_overlay' => array(
      'variables' => array('attributes' => NULL, 'image' => NULL),
    ),
    'manualcrop_croptool_inline' => array(
      'variables' => array('attributes' => NULL, 'image' => NULL, 'crop_info' => TRUE, 'instant_preview' => FALSE),
    ),
    'manualcrop_thumblist' => array(
      'variables' => array('attributes' => NULL, 'images' => NULL, 'crop_info' => TRUE, 'instant_preview' => FALSE),
    ),
    'manualcrop_thumblist_image' => array(
      'variables' => array('attributes' => NULL, 'image' => NULL, 'style' => NULL),
    ),
    'manualcrop_widget' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_image_style_delete().
 */
function manualcrop_image_style_delete($style) {
  if (!empty($style['effects'])) {
    $effect = reset($style['effects']);

    if ($effect['module'] == 'manualcrop') {
      db_delete('manualcrop')
        ->condition('style_name', $style['name'])
        ->execute();

      _manualcrop_field_widget_update_names_in_settings($style['name']);
      _manualcrop_reuse_effect_update_names_in_settings($style['name']);
    }
  }
}

/**
 * Implements hook_file_delete().
 */
function manualcrop_file_delete($file) {
  db_delete('manualcrop')->condition('fid', $file->fid)->execute();
}

/**
 * Implements hook_element_info().
 */
function manualcrop_element_info() {
  $types = array();

  // Add an after build callback if the Insert module is installed.
  if (module_exists('insert')) {
    $types['managed_file'] = array(
      '#after_build' => array('manualcrop_process_insert_widget')
    );
  }

  return $types;
}

/**
 * Implements hook_field_widget_info().
 */
function manualcrop_field_widget_info() {
  return array(
    'manualcrop_image' => array(
      'label' => t('Manual image crop'),
      'field types' => array('image'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function manualcrop_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Use the image field widget form.
  $elements = image_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);

  // Get the widget instance.
  $instance = field_widget_instance($element, $form_state);

  // Prepare the form.
  manualcrop_croptool_prepare_form($form, $form_state, $instance);

  // Add a process function to all elements.
  foreach ($elements as $key => $child) {
    if (isset($child['#process']) && is_array($child['#process']) && in_array('image_field_widget_process', $child['#process'])) {
      $elements[$key]['#process'][] = 'manualcrop_field_widget_process';
      $elements[$key]['#element_validate'][] = 'manualcrop_croptool_validate';
      $elements[$key]['#element_validate'][] = 'file_managed_file_validate';
    }
  }

  return $elements;
}

/**
 * Element #process callback to expand the default image widget to enable cropping.
 */
function manualcrop_field_widget_process($element, &$form_state, $form) {
  if ($element['#file']) {
    // Get the field instance.
    $instance = field_widget_instance($element, $form_state);

    // Add the croptool.
    manualcrop_croptool_process($element, $form_state, $element['#file'], $instance);
  }

  return $element;
}

/**
 * Implements hook_field_attach_submit().
 */
function manualcrop_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  manualcrop_croptool_submit($form, $form_state);
  unset($form_state['manualcrop_data']);
}

/**
 * Prepare the form that will hold the croptool.
 *
 * @param $form
 *    The form structure array.
 * @param $form_state
 *    The form state array.
 * @param $instance
 *    Field instance array.
 */
function manualcrop_croptool_prepare_form(&$form, &$form_state, $instance = NULL) {
  $settings = &drupal_static(__FUNCTION__);
  $fields = array();

  if (!is_array($settings)) {
    $settings = array();

    // Generate image style settings.
    foreach (manualcrop_get_styles_with_crop() as $style_name => $data) {
      $settings[$style_name] = array(
        'effect' => $data['name'],
        'data' => $data['data']
      );
    }
  }

  if (is_array($instance)) {
    // Include the field widget settings for FAPI fields.
    $fields = array(
      drupal_clean_css_identifier($instance['field_name']) => array(
        'required' => manualcrop_instance_required_styles($instance),
        'instantCrop' => !empty($instance['widget']['settings']['instant_crop']),
        'defaultCropArea' => (!isset($instance['widget']['settings']['default_crop_area']) || $instance['widget']['settings']['default_crop_area']),
      ),
    );
  }

  // Add the JavaScript settings.
  $form['#attached']['js'][] = array('data' => array('manualCrop' => array(
    'styles' => $settings,
    'fields' => $fields,
  )), 'type' => 'setting');

  // Reset the images array.
  if (!isset($form_state['manualcrop_data'])) {
    $form_state['manualcrop_data'] = array('images' => array());
  }
  else {
    $form_state['manualcrop_data']['images'] = array();
  }
}

/**
 * Add a croptool to the form element. This extends the FAPI widget or simply adds
 * a new form item to enable cropping in a regular form.
 *
 * @param $element
 *    Form element to be processed. This should be the form array for none FAPI fields.
 * @param $form_state
 *    The form state array.
 * @param $file
 *    The file object.
 * @param $instance
 *    Field instance array.
 * @param $preview
 *    Name of the preview item, this will always be resetted for FAPI fields.
 * @return
 *    Returns TRUE if a croptool has been added, FALSE otherwise.
 */
function manualcrop_croptool_process(&$element, &$form_state, $file, $instance = NULL, $preview = NULL) {
  if (isset($_COOKIE['has_js']) && $_COOKIE['has_js']) {
    $styles = manualcrop_get_styles_with_crop();

    if (!empty($styles)) {
      // Default crop settings.
      $identifier = 'manualcrop-file-' . $file->fid;
      $required = array();
      $crop_type = 'overlay';
      $crop_info = TRUE;
      $instant_preview = FALSE;
      $thumblist = FALSE;

      if (is_array($instance)) {
        // If a FAPI field instance has been passed, so $element is the container
        // and $element['#value'] can be used for storing data.
        $container = &$element;
        $item = &$element['#value'];
        $identifier = drupal_clean_css_identifier($instance['field_name']);
        $preview = 'preview';

        // Get the widget settings.
        $settings = $instance['widget']['settings'];

        // Required image styles.
        $required = manualcrop_instance_required_styles($instance);

        // Overlay or inline cropping.
        if (!empty($settings['inline_crop'])) {
          $crop_type = 'inline';
        }
        else {
          $crop_type = 'overlay';
        }

        // Other widget settings.
        $crop_info = (!isset($settings['crop_info']) || $settings['crop_info']);
        $instant_preview = !empty($settings['instant_preview']);
        $thumblist = !empty($settings['thumblist']);

        // Exclude or include styles.
        if (isset($settings['styles_mode']) && isset($settings['styles_list'])) {
          $list = (isset($settings['styles_list']) ? array_values($settings['styles_list']) : array());

          // Filter hidden styles.
          if ($settings['styles_mode'] == 'include') {
            $styles = array_intersect_key($styles, array_flip($list));
          }
          else {
            $styles = array_diff_key($styles, array_flip($list));
          }

          if (empty($styles)) {
            // Leave if all styles where filtered.
            return FALSE;
          }
        }

        // Thumbnail list, so no preview image.
        if ($thumblist && isset($element[$preview])) {
          unset($element[$preview]);
          $preview = NULL;
        }

        // Override the theme callback.
        $element['#theme'] = 'manualcrop_widget';
      }
      else {
        // The FAPI is not used, we'll create a global manualcrop container as
        // parent for all manualcrop enabled files.
        if (!isset($element['manualcrop'])) {
          $element['manualcrop'] = array(
            '#tree' => TRUE,
          );
        }

        // Create a file specific container.
        $element['manualcrop']['file_' . $file->fid] = array(
          '#type' => 'value',
          '#default_value' => array(),
          '#element_validate' => array('manualcrop_croptool_validate'),
          '#array_parents' => array('manualcrop', 'file_' . $file->fid),
        );

        // Link to the newly created container and item.
        $container = &$element['manualcrop']['file_' . $file->fid];
        $item = &$container['#default_value'];
      }

      // Make sure we have a valid preview or no element.
      if (!empty($preview) && !isset($element[$preview])) {
        $preview = NULL;
      }

      // Add a prefix and suffix to the preview image.
      if (!empty($preview)) {
        $element[$preview]['#prefix'] = '<div class="manualcrop-preview manualcrop-preview-' . $file->fid . '"><div class="manualcrop-preview-cropped"></div>';
        $element[$preview]['#suffix'] = '</div>';
      }

      // Get image info, width and height are used by the cropping widget.
      $image = image_get_info($file->uri);

      // Save some images data to improve processing.
      $form_state['manualcrop_data']['images'][$file->fid] = array(
        'uri' => $file->uri,
        'filename' => $file->filename,
        'width' => $image['width'],
        'height' => $image['height'],
        'element_parents' => $container['#array_parents'],
        'required_styles' => $required,
      );

      // Get the crop selections for this file.
      if (!$form_state['submitted'] && !isset($item['manualcrop_selections'])) {
        $item['manualcrop_selections'] = array();
        foreach (manualcrop_load_crop_selection($file->uri) as $data) {
          $item['manualcrop_selections'][$data->style_name] = $data->x . '|' . $data->y . '|' . $data->width . '|' . $data->height;
        }
      }

      // Original image for cropping.
      $container['manualcrop_' . $crop_type] = array(
        '#type' => 'markup',
        '#markup' => theme('manualcrop_croptool_' . $crop_type, array(
          'attributes' => array(
            'id' => array('manualcrop-' . $crop_type . '-' . $file->fid),
            'class' => array('manualcrop-' . $crop_type, 'element-invisible'),
          ),
          'image' => array(
            'path' => $file->uri,
            'alt' => $file->filename,
            'width' => $image['width'],
            'height' => $image['height'],
            'attributes' => array('class' => array('manualcrop-image')),
          ),
          'crop_info' => $crop_info,
          'instant_preview' => $instant_preview,
        )),
      );

      // Image style options.
      $style_options = array('' => t('Select a style to crop'));

      // Hidden fields to save the crop selection, one for each image style.
      foreach ($styles as $style_name => $data) {
        $container['manualcrop_selections'][$style_name] = array(
          '#type' => 'hidden',
          '#default_value' => (isset($item['manualcrop_selections'][$style_name]) ? $item['manualcrop_selections'][$style_name] : ''),
          '#attributes' => array(
            'id' => 'manualcrop-area-' . $file->fid . '-' . $style_name,
            'class' => array('manualcrop-cropdata'),
            'onchange' => 'ManualCrop.selectionStored(this, ' . $file->fid . ', \'' . $style_name . '\');',
          ),
        );

        $style_options[$style_name] = _manualcrop_image_style_name($style_name);
      }

      // Default form element options.
      $defaults = array(
        '#weight' => (isset($container['title']['#weight']) ? $element['title']['#weight'] : 1),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'manualcrop') . '/manualcrop.css',
            drupal_get_path('module', 'manualcrop') . '/jquery.imgareaselect/css/imgareaselect-animated.css',
          ),
          'js' => array(
            drupal_get_path('module', 'manualcrop') . '/manualcrop.js',
            drupal_get_path('module', 'manualcrop') . '/jquery.imgareaselect/scripts/jquery.imgareaselect.pack.js',
          ),
        ),
      );

      // Element to open the croptool.
      if (!empty($settings['thumblist'])) {
        // Thumbnail list, each image style is transformed in a clickable thumbnail.
        array_shift($style_options);
        foreach ($style_options as $style_name => $style_clean_name) {
          $prefix = '<span class="manualcrop-preview manualcrop-preview-' . $file->fid . ' manualcrop-preview-' . $file->fid . '-' . $style_name . '"><span class="manualcrop-preview-cropped"></span>';
          $suffix = '</span>';

          $style_options[$style_name] = theme('manualcrop_thumblist_image', array(
            'style' => $style_clean_name,
            'image' => $prefix . theme('image_style', array(
              'path' => $file->uri,
              'alt' => $file->filename,
              'width' => $image['width'],
              'height' => $image['height'],
              'style_name' => $style_name,
            )) . $suffix,
            'attributes' => array(
              'class' => array_merge(
                array(
                  'manualcrop-style-thumb',
                  'manualcrop-style-thumb-' . $file->fid,
                  'manualcrop-style-thumb-' . $file->fid . '-' . $style_name,
                  'manualcrop-style-preview-' . $file->fid,
                  'manualcrop-style-preview-' . $file->fid . '-' . $style_name
                ),
                (in_array($style_name, $required) ? array('manualcrop-style-required') : array())
              ),
              'href' => 'javascript:void(0);',
              'onmousedown' => "ManualCrop.showCroptool(event, '" . $identifier . "', '" . $style_name . "', " . $file->fid . ");",
              'onclick' => 'return false;',
            ),
          ));
        }

        $container['manualcrop_style'] = array_merge($defaults, array(
          '#markup' => theme('manualcrop_thumblist', array(
            'attributes' => array(
              'class' => array('manualcrop-thumblist', 'manualcrop-thumblist-' . $file->fid),
            ),
            'images' => $style_options,
          )),
        ));
      }
      elseif (count($style_options) == 2) {
        // Only one style, display a button.
        end($style_options);
        $style_name = key($style_options);

        $container['manualcrop_style'] = array_merge($defaults, array(
          '#type' => 'button',
          '#value' => t('Crop'),
          '#attributes' => array(
            'class' => array_merge(array('manualcrop-style-button', 'manualcrop-style-button-' . $file->fid), (in_array($style_name, $required) ? array('manualcrop-style-required') : array())),
            'onmousedown' => "ManualCrop.showCroptool(event, '" . $identifier . "', '" . $style_name . "', " . $file->fid . ");",
            'onclick' => 'return false;',
          ),
          '#prefix' => '<div class="manualcrop-style-button-holder">',
          '#suffix' => '</div>',
        ));
      }
      else {
        // Style selection list.
        $container['manualcrop_style'] = array_merge($defaults, array(
          '#type' => 'select',
          '#title' => t('Manual Crop'),
          '#description' => t('Select the image style to crop, the corresponding cropping tool will open.'),
          '#options' => $style_options,
          '#multiple' => FALSE,
          '#attributes' => array(
            'class' => array('manualcrop-style-select', 'manualcrop-style-select-' . $file->fid),
            'onchange' => "ManualCrop.showCroptool(event, '" . $identifier . "', this, " . $file->fid . ");",
          ),
        ));
      }

      // The FAPI widget can have a alt and title field, decrease their weight.
      if (isset($container['alt'])) {
        $container['alt']['#weight']--;
      }

      if (isset($container['title'])) {
        $container['title']['#weight']--;
      }

      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Validation handler to validate each cropping selection.
 *
 * @param $element
 *    The element array.
 * @param $form_state
 *    The form state array.
 */
function manualcrop_croptool_validate($element, &$form_state) {
  if (!empty($form_state['manualcrop_data']['images']) && (!isset($form_state['clicked_button']) || !in_array($form_state['clicked_button']['#value'], array(t('Upload'), t('Remove'))))) {
    // Create a new key in the data array, this is to store processed selections.
    $form_state['manualcrop_data']['selections'] = array();
    $save = &$form_state['manualcrop_data']['selections'];

    // Loop trough the positions to get the manualcrop data.
    foreach ($form_state['manualcrop_data']['images'] as $fid => $image) {
      $value = drupal_array_get_nested_value($form_state['values'], $image['element_parents']);

      if (isset($value['manualcrop_selections'])) {
        // Create a selections array for the current image, the first element is
        // the path to the original image, needed for flushing the cache.
        $save[$fid] = array(
          'path' => $image['uri'],
          'styles' => array(),
        );

        $first = TRUE;

        foreach ($value['manualcrop_selections'] as $style_name => $selection) {
          $clean_style_name = _manualcrop_image_style_name($style_name);

          if ($first) {
            $element_key = implode('][', $image['element_parents']) . '][manualcrop_style';
          }
          else {
            $element_key = implode('][', $image['element_parents']) . '][manualcrop_selections][' . $style_name;
          }

          if (!empty($selection)) {
            if (preg_match('/^([0-9]+\|){3}[0-9]+$/', $selection)) {
              $selection = array_map('intval', explode('|', $selection));

              // Check position and minimum dimensions.
              if ($selection[0] >= 0 && $selection[1] >= 0 && $selection[2] > 0 && $selection[3] > 0) {
                // Check if the selections fits on the image.
                if (($selection[0] + $selection[2]) <= $image['width'] && ($selection[1] + $selection[3]) <= $image['height']) {
                  $save[$fid]['styles'][$style_name] = array(
                    'x' => $selection[0],
                    'y' => $selection[1],
                    'width' => $selection[2],
                    'height' => $selection[3],
                  );
                  continue;
                }
              }
            }

            form_set_error($element_key, t('The crop selection for %filename (@style image style) is invalid, please clear it or reselect.', array(
              '@style' => $clean_style_name,
              '%filename' => $image['filename']
            )));

            $first = FALSE;
          }
          elseif (in_array($style_name, $image['required_styles'], TRUE)) {
            // Uncropped required style.
            form_set_error($element_key, t('%filename must have a cropping selection for the @style image style.', array(
              '@style' => $clean_style_name,
              '%filename' => $image['filename']
            )));
          }
        }
      }
    }
  }
}

/**
 * Submit handler to store each cropping selection.
 *
 * @param $form
 *    The form structure array.
 * @param $form_state
 *    The form state array.
 */
function manualcrop_croptool_submit($form, &$form_state) {
  if (!empty($form_state['manualcrop_data']['selections'])) {
    // Loop trough the selections to save them. $data['styles'] can by an empty array,
    // but we loop trough the whole array to delete old selections.
    foreach ($form_state['manualcrop_data']['selections'] as $fid => $data) {
      db_delete('manualcrop')
        ->condition('fid', $fid)
        ->execute();

      foreach ($data['styles'] as $style_name => $selection) {
        db_insert('manualcrop')
          ->fields(array_merge($selection, array(
            'fid' => $fid,
            'style_name' => $style_name
          )))
          ->execute();
      }

      // Clear the cached versions of this image.
      image_path_flush($data['path']);

      if (variable_get('manualcrop_cache_control', TRUE)) {
        // Clear the cached image paths.
        cache_clear_all('manualcrop', 'cache', TRUE);
      }
    }

    // A success message is only shown when not using the FAPI.
    if (!empty($form['manualcrop'])) {
      drupal_set_message(t('The crop selections have been saved.'));
    }
  }
}

/**
 * Preprocessing for theme_image(); Force reloading of an image after re-cropping.
 *
 * @param $variables
 *    Image template variables.
 */
function manualcrop_preprocess_image(&$variables) {
  // Does the image style have a Manual Crop effect?
  $is_cropstyle = (isset($variables['style_name']) && array_key_exists($variables['style_name'], manualcrop_get_styles_with_crop()));

  // Is cache control enabled?
  $cache_control = variable_get('manualcrop_cache_control', TRUE);

  if ($is_cropstyle && $cache_control) {
    // Attempt to load HTTP cache-controller from database cache.
    $original_path = $variables['path'];

    if ($cached_path = cache_get('manualcrop|' . $original_path)) {
      $variables['path'] = $cached_path->data;
    }
    else {
      // No HTTP cache-controller in database cache, get the image path.
      $match = '/styles/' . $variables['style_name'] . '/';
      $path = substr($variables['path'], (strrpos($variables['path'], $match) + drupal_strlen($match)));
      $path = explode('/', $path);

      // Build the image URI.
      $scheme = array_shift($path);
      $target = implode('/', $path);
      $image_uri = $scheme . '://' . urldecode($target);

      // Load the cropping area.
      if ($crop = manualcrop_load_crop_selection($image_uri, $variables['style_name'])) {
        // Add a HTTP cache-controller to the image path.
        $variables['path'] .= (strpos($variables['path'], '?q=') !== FALSE ? '&' : '?') . 'c=' . md5($crop->x . '|' . $crop->y . '|' . $crop->width . '|' . $crop->height);

        // Cache the the updated image path.
        cache_set('manualcrop|' . $original_path, $variables['path']);
      }
    }
  }
}

/**
 * Returns HTML for a Manual Crop image field widget.
 *
 * @param $variables
 *    An associative array containing:
 *    - "element": A render element representing the Manual Crop image field widget.
 *
 * @ingroup themeable
 */
function theme_manualcrop_widget($variables) {
  // Use the image widget theming function.
  return theme_image_widget($variables);
}

/**
 * Returns HTML for the overlay crop area of an image.
 *
 * @param $variables
 *    An associative array containing:
 *    - "attributes": An array of attributes.
 *    - "image": An array of variables for the image theming function.
 *
 * @ingroup themeable
 */
function theme_manualcrop_croptool_overlay($variables) {
  $output = '<div ' . drupal_attributes($variables['attributes']) . '>';

  $output .= '<div class="manualcrop-overlay-bg"></div>';

  $output .= '<div class="manualcrop-image-holder">';
  $output .= theme('image', $variables["image"]);
  $output .= '</div>';

  if ($variables['instant_preview']) {
    $output .= '<div class="manualcrop-instantpreview"></div>';
  }

  if ($variables['crop_info']) {
    $output .= '<div class="manualcrop-details">';
    $output .= t('Image style') . ': <span class="manualcrop-details-value manualcrop-image-style">&nbsp;</span>, ';
    $output .= t('Selection x') . ': <span class="manualcrop-details-value manualcrop-selection-x">-</span>, ';
    $output .= t('Selection y') . ': <span class="manualcrop-details-value manualcrop-selection-y">-</span>, ';
    $output .= t('Selection width') . ': <span class="manualcrop-details-value manualcrop-selection-width">-</span>, ';
    $output .= t('Selection height') . ': <span class="manualcrop-details-value manualcrop-selection-height">-</span>';
    $output .= '</div>';
  }

  $output .= '<div class="manualcrop-buttons">';
  $output .= '<a class="manualcrop-button manualcrop-reset" href="javascript:void(0);" onmousedown="ManualCrop.resetSelection(); this.blur();">' . t('Restore') . '</a>';
  $output .= '<a class="manualcrop-button manualcrop-clear" href="javascript:void(0);" onmousedown="ManualCrop.clearSelection(); this.blur();">' . t('Discard') . '</a>';
  $output .= '<a class="manualcrop-button manualcrop-close" href="javascript:void(0);" onmousedown="ManualCrop.closeCroptool(); this.blur();">' . t('Apply') . '</a>';
  $output .= '</div>';

  $output .= '</div>';

  return $output;
}

/**
 * Returns HTML for the inline crop area of an image.
 *
 * @param $variables
 *    An associative array containing:
 *    - "attributes": An array of attributes.
 *    - "image": An array of variables for the image theming function.
 *
 * @ingroup themeable
 */
function theme_manualcrop_croptool_inline($variables) {
  $output = '<div ' . drupal_attributes($variables['attributes']) . '>';

  $output .= '<div class="manualcrop-image-holder">';
  $output .= theme('image', $variables['image']);
  $output .= '</div>';

  $output .= '<div class="clearfix">';

  if ($variables['instant_preview']) {
    $output .= '<div class="manualcrop-instantpreview"></div>';
  }

  if ($variables['crop_info']) {
    $output .= '<div class="manualcrop-details">';
    $output .= t('Image style') . ': <span class="manualcrop-details-value manualcrop-image-style">&nbsp;</span><br />';
    $output .= t('Selection x') . ': <span class="manualcrop-details-value manualcrop-selection-x">-</span><br />';
    $output .= t('Selection y') . ': <span class="manualcrop-details-value manualcrop-selection-y">-</span><br />';
    $output .= t('Selection width') . ': <span class="manualcrop-details-value manualcrop-selection-width">-</span><br />';
    $output .= t('Selection height') . ': <span class="manualcrop-details-value manualcrop-selection-height">-</span>';
    $output .= '</div>';
  }

  $output .= '<div class="manualcrop-buttons">';
  $output .= '<input type="button" value="' . t('Restore') . '" class="manualcrop-button manualcrop-reset form-submit" onmousedown="ManualCrop.resetSelection(); this.blur();" />';
  $output .= '<input type="button" value="' . t('Discard') . '" class="manualcrop-button manualcrop-clear form-submit" onmousedown="ManualCrop.clearSelection(); this.blur();" />';
  $output .= '<input type="button" value="' . t('Apply') . '" class="manualcrop-button manualcrop-close form-submit" onmousedown="ManualCrop.closeCroptool(); this.blur();" />';
  $output .= '</div>';

  $output .= '</div>';

  $output .= '</div>';

  return $output;
}

/**
 * Returns HTML for thumbnail list.
 *
 * @param $variables
 *    An associative array containing:
 *    - "attributes": An array of attributes.
 *    - "images": Array of images html, themed by the "manualcrop_thumblist_image" function an keyed by style name.
 *
 * @ingroup themeable
 */
function theme_manualcrop_thumblist($variables) {
  $output = '<div ' . drupal_attributes($variables['attributes']) . '>';
  $output .= '<div class="clearfix">';
  $output .= implode('', $variables['images']);
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Returns HTML for a single image in the thumbnail list.
 *
 * @param $variables
 *    An associative array containing:
 *    - "attributes": An array of attributes.
 *    - "image": Rendered image tag html.
 *    - "style": Clean style name.
 *
 * @ingroup themeable
 */
function theme_manualcrop_thumblist_image($variables) {
  $output = '<a ' . drupal_attributes($variables['attributes']) . '>';
  $output .= '<strong class="manualcrop-style-thumb-label">' . check_plain($variables['style']) . '</strong>';
  $output .= $variables['image'];
  $output .= '</a>';

  return $output;
}

/**
 * Implements hook_image_effect_info().
 */
function manualcrop_image_effect_info() {
  return array(
    'manualcrop_crop_and_scale' => array(
      'label' => t('Crop and scale manually'),
      'help' => t('Crop and scale a user-selected area, respecting the ratio of the destination width and height.'),
      'effect callback' => 'manualcrop_crop_and_scale_effect',
      'dimensions callback' => 'image_resize_dimensions',
      'form callback' => 'manualcrop_crop_and_scale_form',
      'summary theme' => 'manualcrop_crop_and_scale_summary',
    ),
    'manualcrop_crop' => array(
      'label' => t('Manual crop'),
      'help' => t('Crop a freely user-selected area.'),
      'effect callback' => 'manualcrop_crop_effect',
      'dimensions callback' => 'image_resize_dimensions',
      'form callback' => 'manualcrop_crop_form',
      'summary theme' => 'manualcrop_crop_summary',
    ),
    'manualcrop_reuse' => array(
      'label' => t('Reuse a Manual Crop selection'),
      'help' => 'Reuse a crop selection from another Manual Crop enabled image style.',
      'effect callback' => 'manualcrop_reuse_effect',
      'form callback' => 'manualcrop_reuse_form',
      'summary theme' => 'manualcrop_reuse_summary',
    ),
  );
}

/**
 * Image effect callback; Crop and scale an image resource.
 *
 * @param $image
 *    An image object returned by image_load().
 * @param $data
 *    An array of attributes, needed to perform the crop and scale effect, with
 *    the following items:
 *    - "width": An integer representing the desired width in pixels.
 *    - "height": An integer representing the desired height in pixels.
 *    - "upscale": A boolean indicating that the image should be upscalled if
 *      the dimensions are larger than the original image.
 *    - "onlyscaleifcrop": A boolean indicating that the image should only be scaled
 *      if it was cropped.
 *    - "style_name": The style's machine name.
 * @return
 *    TRUE on success, FALSE on failure to crop and scale image.
 *
 * @see image_crop_effect()
 * @see image_scale_effect()
 */
function manualcrop_crop_and_scale_effect(&$image, $data) {
  // The width and height will be possibly overwritten for the cropping, so copy the data array for later.
  $scale_data = $data;
  $crop = manualcrop_load_crop_selection($image->source, $data["style_name"]);

  if ($crop) {
    // Only crop if a crop was applied.
    $data["width"] = $crop->width;
    $data["height"] = $crop->height;
    $data["anchor"] = $crop->x . "-" . $crop->y;

    if (!image_crop_effect($image, $data)) {
      return FALSE;
    }
  }
  elseif (!empty($data['onlyscaleifcrop'])) {
    return TRUE;
  }

  return image_scale_and_crop_effect($image, $scale_data);
}

/**
 * Image effect callback; Crop an image resource.
 *
 * @param $image
 *    An image object returned by image_load().
 * @param $data
 *    An array of attributes, needed to perform the crop effect, with the
 *    following items:
 *    - "width": An integer representing the desired width in pixels.
 *    - "height": An integer representing the desired height in pixels.
 *    - "style_name": The style's machine name.
 * @return
 *    TRUE on success, FALSE on failure to crop image.
 *
 * @see image_crop_effect()
 */
function manualcrop_crop_effect(&$image, $data) {
  $crop = manualcrop_load_crop_selection($image->source, $data["style_name"]);

  if ($crop) {
    $data["width"] = $crop->width;
    $data["height"] = $crop->height;
    $data["anchor"] = $crop->x . "-" . $crop->y;

    return image_crop_effect($image, $data);
  }

  return TRUE;
}

/**
 * Image effect callback; Reuse a Manual Crop effect.
 *
 * @param $image
 *    An image object returned by image_load().
 * @param $data
 *    An array of settings, needed to perform the reuse effect, with the
 *    following items:
 *    - "reusestyle": The image style to reuse.
 * @return
 *    TRUE on success, FALSE on failure to reuse the effect.
 *
 * @see image_crop_effect()
 */
function manualcrop_reuse_effect(&$image, $data) {
  if (empty($data['reusestyle'])) {
    return FALSE;
  }

  // Load the selected image style and gat the first effect.
  $style = image_style_load($data['reusestyle']);
  $effect = reset($style['effects']);

  if (_manualcrop_is_crop_effect($effect)) {
    // Apply the Manual Crop cropping effect.
    image_effect_apply($image, $effect);
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_filefield_sources_widgets().
 *
 * Provides integration with the FileField Sources widget.
 */
function manualcrop_filefield_sources_widgets() {
  return array('manualcrop_image');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Provides integration with the File Entity and Media modules.
 */
function manualcrop_form_file_entity_edit_alter(&$form, &$form_state) {
  if ($form['type']['#value'] == 'image' && !empty($form['preview']['#file'])) {
    // Prepare the form.
    manualcrop_croptool_prepare_form($form, $form_state);

    // Add the croptool.
    manualcrop_croptool_process($form, $form_state, $form['preview']['#file']);

    // Add the submit handler
    $form['#submit'][] = 'manualcrop_croptool_submit';
  }
}

/**
 * Implements hook_insert_widgets().
 *
 * Expose the Manual Crop widget to the Insert module.
 */
function manualcrop_insert_widgets() {
  return array(
    'manualcrop_image' => array(
      'element_type' => 'managed_file',
      'wrapper' => '.image-widget',
      'fields' => array(
        'alt' => 'input[name$="[alt]"], textarea[name$="[alt]"]',
        'title' => 'input[name$="[title]"], textarea[name$="[title]"]',
        'description' => 'input[name$="[description]"], textarea[name$="[description]"]',
      ),
    ),
  );
}

/**
 * Implements hook_insert_styles().
 */
function manualcrop_insert_styles() {
  $insert_styles = drupal_static(__FUNCTION__);

  if (is_null($insert_styles)) {
    $insert_styles = array();

    foreach (manualcrop_get_styles_with_crop() as $style_name => $effect) {
      $insert_styles['image_' . $style_name] = array(
        'label' => _manualcrop_image_style_name($style_name),
      );
    }
  }

  return $insert_styles;
}

/**
 * Implements hook_insert_styles_alter().
 */
function manualcrop_insert_styles_alter(&$types) {
  foreach ($types as &$type) {
    if ($type['module'] == 'manualcrop') {
      $type['module'] = 'image';
    }
  }
}

/**
 * Additional after build callback to modify form elements added by the Insert module.
 *
 * @param $element
 *    The element to process.
 */
function manualcrop_process_insert_widget($element) {
  if (!empty($element['insert']['#options']) && !empty($element['manualcrop_selections'])) {
    // Make a list of all styles that are visible in the widget.
    $styles = array('image' => 1);
    foreach (element_children($element['manualcrop_selections']) as $style) {
      $styles['image_' . $style] = 1;
    }

    // Filter hidden styles from Insert.
    $element['insert']['#options'] = array_intersect_key($element['insert']['#options'], $styles);

    // Make sure the default value is allowed.
    if (!array_key_exists($element['insert']['#default_value'], $element['insert']['#options'])) {
      reset($element['insert']['#options']);
      $element['insert']['#default_value'] = key($element['insert']['#options']);
    }
  }

  return $element;
}
